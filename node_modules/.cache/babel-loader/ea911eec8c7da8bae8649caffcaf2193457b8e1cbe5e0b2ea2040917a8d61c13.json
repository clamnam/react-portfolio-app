{"ast":null,"code":"\"use strict\";\n\nvar cssesc = require(\"cssesc\");\nvar stringify;\nfunction escape(str, stringType) {\n  return cssesc(str, {\n    quotes: stringType === \"\\\"\" ? \"double\" : \"single\"\n  });\n}\nfunction stringifyWithoutBeforeAfter(tree) {\n  switch (tree.type) {\n    case \"values\":\n      return tree.nodes.map(stringify).join(\",\");\n    case \"value\":\n      return tree.nodes.map(stringify).join(\"\");\n    case \"item\":\n      return tree.name;\n    case \"nested-item\":\n      return tree.name + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\n    case \"invalid\":\n      return tree.value;\n    case \"comment\":\n      return \"/*\" + tree.content + \"*/\";\n    case \"string\":\n      switch (tree.stringType) {\n        case \"'\":\n          return \"'\" + escape(tree.value, \"'\") + \"'\";\n        case \"\\\"\":\n          return \"\\\"\" + escape(tree.value, \"\\\"\") + \"\\\"\";\n      }\n      /* istanbul ignore next */\n      throw new Error(\"Invalid stringType\");\n    case \"url\":\n      var start = \"url(\" + (tree.innerSpacingBefore || \"\");\n      var end = (tree.innerSpacingAfter || \"\") + \")\";\n      switch (tree.stringType) {\n        case \"'\":\n          return start + \"'\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/'/g, \"\\\\'\") + \"'\" + end;\n        case \"\\\"\":\n          return start + \"\\\"\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\" + end;\n        default:\n          return start + tree.url.replace(/(\"|'|\\)|\\\\)/g, \"\\\\$1\") + end;\n      }\n  }\n}\nstringify = function stringify(tree) {\n  var str = stringifyWithoutBeforeAfter(tree);\n  if (tree.before) {\n    str = tree.before + str;\n  }\n  if (tree.after) {\n    str = str + tree.after;\n  }\n  return str;\n};\nmodule.exports = stringify;","map":{"version":3,"names":["cssesc","require","stringify","escape","str","stringType","quotes","stringifyWithoutBeforeAfter","tree","type","nodes","map","join","name","value","content","Error","start","innerSpacingBefore","end","innerSpacingAfter","url","replace","before","after","module","exports"],"sources":["/Users/jackmoloneyobrien/Desktop/College/Front-End/react-portfolio/react-portfolio-app/react-portfolio-app/node_modules/css-selector-tokenizer/lib/stringifyValues.js"],"sourcesContent":["\"use strict\";\n\nvar cssesc = require(\"cssesc\");\n\nvar stringify;\n\nfunction escape(str, stringType) {\n\treturn cssesc(str, {\n\t\tquotes: stringType === \"\\\"\" ? \"double\" : \"single\"\n\t});\n}\n\nfunction stringifyWithoutBeforeAfter(tree) {\n\tswitch(tree.type) {\n\tcase \"values\":\n\t\treturn tree.nodes.map(stringify).join(\",\");\n\tcase \"value\":\n\t\treturn tree.nodes.map(stringify).join(\"\");\n\tcase \"item\":\n\t\treturn tree.name;\n\tcase \"nested-item\":\n\t\treturn tree.name + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\n\tcase \"invalid\":\n\t\treturn tree.value;\n\tcase \"comment\":\n\t\treturn \"/*\" + tree.content + \"*/\";\n\tcase \"string\":\n\t\tswitch(tree.stringType) {\n\t\tcase \"'\":\n\t\t\treturn \"'\" + escape(tree.value, \"'\") + \"'\";\n\t\tcase \"\\\"\":\n\t\t\treturn \"\\\"\" + escape(tree.value, \"\\\"\") + \"\\\"\";\n\t\t}\n\t\t/* istanbul ignore next */\n\t\tthrow new Error(\"Invalid stringType\");\n\tcase \"url\":\n\t\tvar start = \"url(\" + (tree.innerSpacingBefore || \"\");\n\t\tvar end = (tree.innerSpacingAfter || \"\") + \")\";\n\t\tswitch(tree.stringType) {\n\t\tcase \"'\":\n\t\t\treturn start + \"'\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/'/g, \"\\\\'\") + \"'\" + end;\n\t\tcase \"\\\"\":\n\t\t\treturn start + \"\\\"\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\" + end;\n\t\tdefault:\n\t\t\treturn start + tree.url.replace(/(\"|'|\\)|\\\\)/g, \"\\\\$1\") + end;\n\t\t}\n\t}\n}\n\n\nstringify = function stringify(tree) {\n\tvar str = stringifyWithoutBeforeAfter(tree);\n\tif(tree.before) {\n\t\tstr = tree.before + str;\n\t}\n\tif(tree.after) {\n\t\tstr = str + tree.after;\n\t}\n\treturn str;\n};\n\nmodule.exports = stringify;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9B,IAAIC,SAAS;AAEb,SAASC,MAAMA,CAACC,GAAG,EAAEC,UAAU,EAAE;EAChC,OAAOL,MAAM,CAACI,GAAG,EAAE;IAClBE,MAAM,EAAED,UAAU,KAAK,IAAI,GAAG,QAAQ,GAAG;EAC1C,CAAC,CAAC;AACH;AAEA,SAASE,2BAA2BA,CAACC,IAAI,EAAE;EAC1C,QAAOA,IAAI,CAACC,IAAI;IAChB,KAAK,QAAQ;MACZ,OAAOD,IAAI,CAACE,KAAK,CAACC,GAAG,CAACT,SAAS,CAAC,CAACU,IAAI,CAAC,GAAG,CAAC;IAC3C,KAAK,OAAO;MACX,OAAOJ,IAAI,CAACE,KAAK,CAACC,GAAG,CAACT,SAAS,CAAC,CAACU,IAAI,CAAC,EAAE,CAAC;IAC1C,KAAK,MAAM;MACV,OAAOJ,IAAI,CAACK,IAAI;IACjB,KAAK,aAAa;MACjB,OAAOL,IAAI,CAACK,IAAI,GAAG,GAAG,GAAGL,IAAI,CAACE,KAAK,CAACC,GAAG,CAACT,SAAS,CAAC,CAACU,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;IACnE,KAAK,SAAS;MACb,OAAOJ,IAAI,CAACM,KAAK;IAClB,KAAK,SAAS;MACb,OAAO,IAAI,GAAGN,IAAI,CAACO,OAAO,GAAG,IAAI;IAClC,KAAK,QAAQ;MACZ,QAAOP,IAAI,CAACH,UAAU;QACtB,KAAK,GAAG;UACP,OAAO,GAAG,GAAGF,MAAM,CAACK,IAAI,CAACM,KAAK,EAAE,GAAG,CAAC,GAAG,GAAG;QAC3C,KAAK,IAAI;UACR,OAAO,IAAI,GAAGX,MAAM,CAACK,IAAI,CAACM,KAAK,EAAE,IAAI,CAAC,GAAG,IAAI;MAC9C;MACA;MACA,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;IACtC,KAAK,KAAK;MACT,IAAIC,KAAK,GAAG,MAAM,IAAIT,IAAI,CAACU,kBAAkB,IAAI,EAAE,CAAC;MACpD,IAAIC,GAAG,GAAG,CAACX,IAAI,CAACY,iBAAiB,IAAI,EAAE,IAAI,GAAG;MAC9C,QAAOZ,IAAI,CAACH,UAAU;QACtB,KAAK,GAAG;UACP,OAAOY,KAAK,GAAG,GAAG,GAAGT,IAAI,CAACa,GAAG,CAACC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,GAAG,GAAGH,GAAG;QACxF,KAAK,IAAI;UACR,OAAOF,KAAK,GAAG,IAAI,GAAGT,IAAI,CAACa,GAAG,CAACC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,IAAI,GAAGH,GAAG;QAC3F;UACC,OAAOF,KAAK,GAAGT,IAAI,CAACa,GAAG,CAACC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC,GAAGH,GAAG;MAC9D;EACD;AACD;AAGAjB,SAAS,GAAG,SAASA,SAASA,CAACM,IAAI,EAAE;EACpC,IAAIJ,GAAG,GAAGG,2BAA2B,CAACC,IAAI,CAAC;EAC3C,IAAGA,IAAI,CAACe,MAAM,EAAE;IACfnB,GAAG,GAAGI,IAAI,CAACe,MAAM,GAAGnB,GAAG;EACxB;EACA,IAAGI,IAAI,CAACgB,KAAK,EAAE;IACdpB,GAAG,GAAGA,GAAG,GAAGI,IAAI,CAACgB,KAAK;EACvB;EACA,OAAOpB,GAAG;AACX,CAAC;AAEDqB,MAAM,CAACC,OAAO,GAAGxB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}