{"ast":null,"code":"const Tokenizer = require(\"css-selector-tokenizer\");\nfunction itMatchesOne(arr, term) {\n  return arr.some(i => term.search(i) >= 0);\n}\nfunction parseAttrSelector(node) {\n  const {\n    content\n  } = node;\n  const regex = /(^class|^id)([*^?~|$=]*)+(?:(\"\\s*)([^\"\\\\]*?(?:\\\\.[^\"\\\\]*)*?)(\\s*\")|('\\s*)([^'\\\\]*?(?:\\\\.[^'\\\\]*)*?)(\\s*'))/i;\n  const [type, operator, head, classes, foot] = content.split(regex).filter(part => part);\n  return {\n    type,\n    operator,\n    head,\n    classes: classes ? classes.split(\" \").map(c => c.replace(/\"|'/g, \"\")) : [],\n    foot\n  };\n}\nfunction attrStringify({\n  type,\n  operator,\n  head,\n  classes,\n  foot\n}) {\n  return `${type}${operator || \"\"}${head || \"\"}${classes.join(\" \")}${foot || \"\"}`;\n}\nfunction prefixNode(node, prefix) {\n  if ([\"class\", \"id\"].includes(node.type)) {\n    return {\n      ...node,\n      name: `${prefix}${node.name}`\n    };\n  }\n  if ([\"attribute\"].includes(node.type) && node.content) {\n    const {\n      type,\n      operator,\n      head,\n      classes,\n      foot\n    } = parseAttrSelector(node);\n    if (![\"class\", \"id\"].includes(type)) return node;\n    return {\n      ...node,\n      content: attrStringify({\n        type,\n        operator,\n        head,\n        classes: classes.map(cls => `${prefix}${cls}`),\n        foot\n      })\n    };\n  }\n  return node;\n}\nfunction iterateSelectorNodes(selector, options) {\n  const {\n    prefix,\n    ignore\n  } = options;\n  return {\n    ...selector,\n    nodes: selector.nodes.map(node => {\n      if ([\"selector\", \"nested-pseudo-class\"].includes(node.type)) {\n        return iterateSelectorNodes(node, options);\n      }\n      if (itMatchesOne(ignore, Tokenizer.stringify(node))) return node;\n      return prefixNode(node, prefix);\n    })\n  };\n}\n\n/**\n * @type {import('postcss').PluginCreator}\n */\nmodule.exports = (opts = {}) => {\n  const {\n    prefix,\n    ignore\n  } = {\n    prefix: \"\",\n    ignore: [],\n    ...opts\n  };\n  if (typeof prefix !== \"string\") {\n    throw new Error(\"prefix option should be of type string.\");\n  }\n  if (!Array.isArray(ignore)) {\n    throw new Error(\"ignore options should be an Array.\");\n  }\n  if (!prefix.length) return;\n  return {\n    postcssPlugin: \"addprefix\",\n    Root(root, postcss) {\n      root.walkRules(rule => {\n        const parsed = Tokenizer.parse(rule.selector);\n        const selector = iterateSelectorNodes(parsed, {\n          prefix,\n          ignore\n        });\n        rule.selector = Tokenizer.stringify(selector);\n      });\n    }\n  };\n};\nmodule.exports.postcss = true;","map":{"version":3,"names":["Tokenizer","require","itMatchesOne","arr","term","some","i","search","parseAttrSelector","node","content","regex","type","operator","head","classes","foot","split","filter","part","map","c","replace","attrStringify","join","prefixNode","prefix","includes","name","cls","iterateSelectorNodes","selector","options","ignore","nodes","stringify","module","exports","opts","Error","Array","isArray","length","postcssPlugin","Root","root","postcss","walkRules","rule","parsed","parse"],"sources":["/Users/jackmoloneyobrien/Desktop/College/Front-End/react-portfolio/react-portfolio-app/react-portfolio-app/node_modules/daisyui/src/lib/addPrefix.js"],"sourcesContent":["const Tokenizer = require(\"css-selector-tokenizer\")\n\nfunction itMatchesOne(arr, term) {\n  return arr.some((i) => term.search(i) >= 0)\n}\n\nfunction parseAttrSelector(node) {\n  const { content } = node\n  const regex =\n    /(^class|^id)([*^?~|$=]*)+(?:(\"\\s*)([^\"\\\\]*?(?:\\\\.[^\"\\\\]*)*?)(\\s*\")|('\\s*)([^'\\\\]*?(?:\\\\.[^'\\\\]*)*?)(\\s*'))/i\n\n  const [type, operator, head, classes, foot] = content.split(regex).filter((part) => part)\n\n  return {\n    type,\n    operator,\n    head,\n    classes: classes ? classes.split(\" \").map((c) => c.replace(/\"|'/g, \"\")) : [],\n    foot,\n  }\n}\n\nfunction attrStringify({ type, operator, head, classes, foot }) {\n  return `${type}${operator || \"\"}${head || \"\"}${classes.join(\" \")}${foot || \"\"}`\n}\n\nfunction prefixNode(node, prefix) {\n  if ([\"class\", \"id\"].includes(node.type)) {\n    return {\n      ...node,\n      name: `${prefix}${node.name}`,\n    }\n  }\n\n  if ([\"attribute\"].includes(node.type) && node.content) {\n    const { type, operator, head, classes, foot } = parseAttrSelector(node)\n\n    if (![\"class\", \"id\"].includes(type)) return node\n\n    return {\n      ...node,\n      content: attrStringify({\n        type,\n        operator,\n        head,\n        classes: classes.map((cls) => `${prefix}${cls}`),\n        foot,\n      }),\n    }\n  }\n\n  return node\n}\n\nfunction iterateSelectorNodes(selector, options) {\n  const { prefix, ignore } = options\n  return {\n    ...selector,\n    nodes: selector.nodes.map((node) => {\n      if ([\"selector\", \"nested-pseudo-class\"].includes(node.type)) {\n        return iterateSelectorNodes(node, options)\n      }\n\n      if (itMatchesOne(ignore, Tokenizer.stringify(node))) return node\n\n      return prefixNode(node, prefix)\n    }),\n  }\n}\n\n/**\n * @type {import('postcss').PluginCreator}\n */\nmodule.exports = (opts = {}) => {\n  const { prefix, ignore } = {\n    prefix: \"\",\n    ignore: [],\n    ...opts,\n  }\n\n  if (typeof prefix !== \"string\") {\n    throw new Error(\"prefix option should be of type string.\")\n  }\n\n  if (!Array.isArray(ignore)) {\n    throw new Error(\"ignore options should be an Array.\")\n  }\n\n  if (!prefix.length) return\n\n  return {\n    postcssPlugin: \"addprefix\",\n    Root(root, postcss) {\n      root.walkRules((rule) => {\n        const parsed = Tokenizer.parse(rule.selector)\n        const selector = iterateSelectorNodes(parsed, { prefix, ignore })\n\n        rule.selector = Tokenizer.stringify(selector)\n      })\n    },\n  }\n}\n\nmodule.exports.postcss = true\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}